import 'package:hive/hive.dart';
import 'package:karmalab_assignment/utils/formatters/formatter.dart';

part 'user_model.g.dart'; // This will be generated by Hive

@HiveType(typeId: 0)
class UserModel {
  @HiveField(0)
  dynamic avatar;

  @HiveField(1)
  Location? location;

  @HiveField(2)
  String? id;

  @HiveField(3)
  String name;

  @HiveField(4)
  String email;

  @HiveField(5)
  String password;

  @HiveField(6)
  String? confirmPassword;

  @HiveField(7)
  String? role;

  @HiveField(8)
  bool? isActive;

  bool? isFeatured;

  @HiveField(9)
  bool? isVerified;

  @HiveField(10)
  String? phoneNumber;

  @HiveField(11)
  String? gender;

  @HiveField(12)
  List<dynamic>? likes;

  @HiveField(13)
  DateTime? createdAt;

  @HiveField(14)
  DateTime? updatedAt;

  @HiveField(15)
  int? v;

  @HiveField(16)
  OtherPermissions? otherPermissions; // New field

  UserModel({
    this.avatar,
    this.location,
    this.id,
    required this.name,
    required this.email,
    required this.password,
    this.confirmPassword,
    this.role,
    this.isActive,
    this.isFeatured,
    this.isVerified,
    this.phoneNumber,
    this.gender,
    this.likes,
    this.createdAt,
    this.updatedAt,
    this.v,
    this.otherPermissions, // Initialize in constructor
  });

  String get fullName => name;

  String get formattedPhoneNo => Formatter.formatPhoneNumber(phoneNumber ?? '');

  static List<String> nameParts(fullName) => fullName.split(" ");

  static String generateUsername(fullName) {
    List<String> nameParts = fullName.split(" ");
    String firstName = nameParts[0].toLowerCase();
    String lastName = nameParts.length > 1 ? nameParts[1].toLowerCase() : "";

    String camelCaseUsername = "$firstName$lastName";
    String usernameWithPrefix = "fs_$camelCaseUsername";
    return usernameWithPrefix;
  }

  static UserModel empty() => UserModel(id: '', name: '', email: '', phoneNumber: '', avatar: '', password: '');



  factory UserModel.fromJson(Map<String, dynamic> json) {
    if (json != null) {
      String profilePicture = '';
      if (json["avatar"] is String) {
        profilePicture = json["avatar"];
      } else if (json["avatar"] is Map<String, dynamic>) {
        profilePicture = "https://baburhaatbd.com${Avatar.fromJson(json["avatar"]).secureUrl}";
      }

      return UserModel(
        avatar: profilePicture,
        location: json["location"] != null ? Location.fromJson(json["location"]) : null,
        id: json["_id"],
        name: json["name"]??'Anonymous',
        email: json["email"]??'',
        password: json["password"]??'',
        role: json["role"]??'',
        isActive: json["isActive"] ?? false,
        isFeatured: json["isFeatured"] ?? false,
        isVerified: json["isVerified"] ?? false,
        phoneNumber: json["phone"] ?? '',
        gender: json["gender"]??'',
        likes: json["likes"] != null ? List<dynamic>.from(json["likes"].map((x) => x)) : [],
        createdAt: json["createdAt"] != null ? DateTime.parse(json["createdAt"]) : null,
        updatedAt: json["updatedAt"] != null ? DateTime.parse(json["updatedAt"]) : null,
        v: json["__v"],
        otherPermissions: json["otherPermissions"] != null ? OtherPermissions.fromJson(json["otherPermissions"]) : null,
      );
    } else {
      return UserModel.empty();
    }
  }





  Map<String, dynamic> toJson() => {
    "avatar": avatar,
    "name": name,
    "email": email,
    "password": password,
    "phone": phoneNumber,
    "confirmPassword": confirmPassword,
    "otherPermissions": otherPermissions?.toJson(),
  };
}

// Avatar Class
@HiveType(typeId: 1)
class Avatar {
  @HiveField(0)
  String publicId;

  @HiveField(1)
  String secureUrl;

  Avatar({
    required this.publicId,
    required this.secureUrl,
  });

  factory Avatar.fromJson(Map<String, dynamic> json) => Avatar(
    publicId: json["public_id"],
    secureUrl: json["secure_url"],
  );

  Map<String, dynamic> toJson() => {
    "public_id": publicId,
    "secure_url": secureUrl,
  };
}

// Location Class
@HiveType(typeId: 2)
class Location {
  @HiveField(0)
  String address1;

  @HiveField(1)
  String address2;

  @HiveField(2)
  String city;

  @HiveField(3)
  String state;

  @HiveField(4)
  int postcode;

  @HiveField(5)
  String country;

  Location({
    required this.address1,
    required this.address2,
    required this.city,
    required this.state,
    required this.postcode,
    required this.country,
  });

  factory Location.fromJson(Map<String, dynamic> json) => Location(
    address1: json["address1"],
    address2: json["address2"],
    city: json["city"],
    state: json["state"],
    postcode: json["postcode"],
    country: json["country"],
  );

  Map<String, dynamic> toJson() => {
    "address1": address1,
    "address2": address2,
    "city": city,
    "state": state,
    "postcode": postcode,
    "country": country,
  };
}

// OtherPermissions Class
@HiveType(typeId: 3)
class OtherPermissions {
  @HiveField(0)
  bool? isVendor;

  @HiveField(1)
  bool? isCustomer;

  @HiveField(2)
  bool? isCategories;

  @HiveField(3)
  bool? isProducts;

  @HiveField(4)
  bool? isOrders;

  @HiveField(5)
  bool? isReviews;

  @HiveField(6)
  bool? isVouchers;

  @HiveField(7)
  bool? isAdManager;

  @HiveField(8)
  bool? isRoleManager;

  @HiveField(9)
  bool? isMessageCenter;

  @HiveField(10)
  bool? isFinance;

  @HiveField(11)
  bool? isShipment;

  @HiveField(12)
  bool? isSupport;

  @HiveField(13)
  bool? isEventManager;

  @HiveField(14)
  bool? isMessage;

  OtherPermissions({
    this.isVendor = true,
    this.isCustomer = false,
    this.isCategories = false,
    this.isProducts = false,
    this.isOrders = false,
    this.isReviews = false,
    this.isVouchers = false,
    this.isAdManager = false,
    this.isRoleManager = false,
    this.isMessageCenter = false,
    this.isFinance = false,
    this.isShipment = false,
    this.isSupport = false,
    this.isEventManager = false,
    this.isMessage = false,
  });

  factory OtherPermissions.fromJson(Map<dynamic, dynamic> json) => OtherPermissions(
    isVendor: json["isVendor"],
    isCustomer: json["isCustomer"],
    isCategories: json["isCategories"],
    isProducts: json["isProducts"],
    isOrders: json["isOrders"],
    isReviews: json["isReviews"],
    isVouchers: json["isVouchers"],
    isAdManager: json["isAdManager"],
    isRoleManager: json["isRoleManager"],
    isMessageCenter: json["isMessageCenter"],
    isFinance: json["isFinance"],
    isShipment: json["isShipment"],
    isSupport: json["isSupport"],
    isEventManager: json["isEventManager"],
    isMessage: json["isMessage"],
  );

  Map<String, dynamic> toJson() => {
    "isVendor": isVendor,
    "isCustomer": isCustomer,
    "isCategories": isCategories,
    "isProducts": isProducts,
    "isOrders": isOrders,
    "isReviews": isReviews,
    "isVouchers": isVouchers,
    "isAdManager": isAdManager,
    "isRoleManager": isRoleManager,
    "isMessageCenter": isMessageCenter,
    "isFinance": isFinance,
    "isShipment": isShipment,
    "isSupport": isSupport,
    "isEventManager": isEventManager,
    "isMessage": isMessage,
  };
}
